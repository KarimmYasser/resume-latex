name: 📄 LaTeX Resume CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "**.tex"
      - "**.cls"
      - "**.sty"
      - ".github/workflows/**"
  pull_request:
    branches: [main]
    paths:
      - "**.tex"
      - "**.cls"
      - "**.sty"
  workflow_dispatch: # Allow manual trigger

jobs:
  compile-resume:
    name: 🔨 Compile LaTeX Resume
    runs-on: ubuntu-latest

    strategy:
      matrix:
        theme:
          [
            { name: "light", file: "resume.tex", output: "resume-light.pdf" },
            {
              name: "dark",
              file: "resume-dark.tex",
              output: "resume-dark.pdf",
            },
          ]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup LaTeX Environment
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ matrix.theme.file }}
          latexmk_use_xelatex: false
          latexmk_shell_escape: true
          extra_system_packages: |
            py3-pygments

      - name: 📝 Rename Output PDF
        run: |
          if [ -f "${{ matrix.theme.file }}" ]; then
            # Get the base filename without extension
            base_name=$(basename "${{ matrix.theme.file }}" .tex)
            # Check if renaming is needed (avoid renaming to same file)
            if [ "${base_name}.pdf" != "${{ matrix.theme.output }}" ]; then
              if [ -f "${base_name}.pdf" ]; then
                mv "${base_name}.pdf" "${{ matrix.theme.output }}"
                echo "✅ Renamed: ${base_name}.pdf → ${{ matrix.theme.output }}"
              else
                echo "❌ PDF not found: ${base_name}.pdf"
                exit 1
              fi
            else
              # PDF already has the correct name
              if [ -f "${{ matrix.theme.output }}" ]; then
                echo "✅ Generated: ${{ matrix.theme.output }} (no rename needed)"
              else
                echo "❌ PDF not found: ${{ matrix.theme.output }}"
                exit 1
              fi
            fi
          else
            echo "❌ Source file not found: ${{ matrix.theme.file }}"
            exit 1
          fi

      - name: 📊 Check PDF Properties
        run: |
          if [ -f "${{ matrix.theme.output }}" ]; then
            echo "📄 PDF Information for ${{ matrix.theme.name }} theme:"
            pdfinfo "${{ matrix.theme.output }}" || true
            echo "📏 File size: $(du -h "${{ matrix.theme.output }}" | cut -f1)"
          fi

      - name: 📤 Upload PDF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-${{ matrix.theme.name }}-theme
          path: ${{ matrix.theme.output }}
          retention-days: 90

  create-release:
    name: 🚀 Create Release with PDFs
    needs: compile-resume
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Light Theme PDF
        uses: actions/download-artifact@v4
        with:
          name: resume-light-theme
          path: ./artifacts/

      - name: 📥 Download Dark Theme PDF
        uses: actions/download-artifact@v4
        with:
          name: resume-dark-theme
          path: ./artifacts/

      - name: 🏷️ Generate Release Tag
        id: tag
        run: |
          # Generate timestamp-based tag
          TAG="v$(date +'%Y.%m.%d')-$(date +'%H%M')"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: 📋 Generate Release Notes
        id: release_notes
        run: |
          # Generate release notes
          echo "## 📄 Resume Update - $(date +'%B %d, %Y')" > release_notes.md
          echo "" >> release_notes.md
          echo "### 🎯 What's Included" >> release_notes.md
          echo "- **Light Theme Resume**: Professional version optimized for printing and traditional viewing" >> release_notes.md
          echo "- **Dark Theme Resume**: Modern version perfect for digital portfolios and online sharing" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Build Information" >> release_notes.md
          echo "- **Commit**: \`${{ github.sha }}\`" >> release_notes.md
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> release_notes.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📥 Download Instructions" >> release_notes.md
          echo "1. Click on the PDF files below to download" >> release_notes.md
          echo "2. **Light Theme**: Best for printing and ATS systems" >> release_notes.md
          echo "3. **Dark Theme**: Best for digital viewing and modern portfolios" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔄 Changes in This Release" >> release_notes.md
          git log --pretty=format:"- %s" -n 5 >> release_notes.md
          
          # Set output using file method to avoid EOF issues
          {
            echo 'NOTES<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: 🚀 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: "Resume - ${{ steps.tag.outputs.tag }}"
          body: ${{ steps.release_notes.outputs.NOTES }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/resume-light.pdf
            ./artifacts/resume-dark.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-pdfs:
    name: 🔍 Validate Generated PDFs
    needs: compile-resume
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./pdfs/

      - name: � Install PDF Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils

      - name: �🔍 Validate PDFs
        run: |
          echo "🔍 Validating generated PDFs..."

          for theme_dir in ./pdfs/resume-*-theme/; do
            if [ -d "$theme_dir" ]; then
              theme_name=$(basename "$theme_dir" | sed 's/resume-\(.*\)-theme/\1/')
              echo "📄 Checking $theme_name theme..."
              
              for pdf in "$theme_dir"/*.pdf; do
                if [ -f "$pdf" ]; then
                  echo "  ✅ Found: $(basename "$pdf")"
                  
                  # Check if PDF is valid
                  if pdfinfo "$pdf" > /dev/null 2>&1; then
                    echo "  ✅ PDF is valid"
                    
                    # Check file size (should be reasonable for a resume)
                    size=$(du -k "$pdf" | cut -f1)
                    if [ "$size" -gt 50 ] && [ "$size" -lt 5000 ]; then
                      echo "  ✅ File size OK: ${size}KB"
                    else
                      echo "  ⚠️  Unusual file size: ${size}KB"
                    fi
                    
                    # Check page count (should be 1-3 pages for a resume)
                    pages=$(pdfinfo "$pdf" 2>/dev/null | grep "Pages:" | awk '{print $2}' || echo "1")
                    if [ "$pages" -ge 1 ] && [ "$pages" -le 3 ]; then
                      echo "  ✅ Page count OK: $pages pages"
                    else
                      echo "  ⚠️  Unusual page count: $pages pages"
                    fi
                  else
                    echo "  ❌ PDF validation failed - running diagnostics..."
                    echo "  🔍 File details:"
                    ls -la "$pdf"
                    echo "  🔍 File type:"
                    file "$pdf"
                    echo "  🔍 PDF info output:"
                    pdfinfo "$pdf" 2>&1 || true
                    echo "  ❌ Stopping validation due to invalid PDF"
                    exit 1
                  fi
                else
                  echo "  ❌ No PDF found in $theme_dir"
                  exit 1
                fi
              done
            fi
          done

          echo "🎉 All PDFs validated successfully!"

  notify-status:
    name: 📢 Notify Build Status
    needs: [compile-resume, validate-pdfs]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📢 Build Success Notification
        if: needs.compile-resume.result == 'success' && needs.validate-pdfs.result == 'success'
        run: |
          echo "🎉 Resume compilation successful!"
          echo "✅ Light theme PDF generated"
          echo "✅ Dark theme PDF generated"
          echo "✅ All validations passed"

      - name: 📢 Build Failure Notification
        if: needs.compile-resume.result == 'failure' || needs.validate-pdfs.result == 'failure'
        run: |
          echo "❌ Resume compilation failed!"
          echo "Please check the logs for details."
          exit 1
